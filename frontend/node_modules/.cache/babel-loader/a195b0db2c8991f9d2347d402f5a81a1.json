{"ast":null,"code":"import React from 'react';\n\nfunction processChildren(c) {\n  var slides = [];\n  React.Children.toArray(c).forEach(function (child) {\n    if (child.type && child.type.displayName === 'SwiperSlide') {\n      slides.push(child);\n    } else if (child.props && child.props.children) {\n      processChildren(child.props.children).forEach(function (slide) {\n        return slides.push(slide);\n      });\n    }\n  });\n  return slides;\n}\n\nfunction getChildren(c) {\n  var slides = [];\n  var slots = {\n    'container-start': [],\n    'container-end': [],\n    'wrapper-start': [],\n    'wrapper-end': []\n  };\n  React.Children.toArray(c).forEach(function (child) {\n    if (child.type && child.type.displayName === 'SwiperSlide') {\n      slides.push(child);\n    } else if (child.props && child.props.slot && slots[child.props.slot]) {\n      slots[child.props.slot].push(child);\n    } else if (child.props && child.props.children) {\n      var foundSlides = processChildren(child.props.children);\n\n      if (foundSlides.length > 0) {\n        foundSlides.forEach(function (slide) {\n          return slides.push(slide);\n        });\n      } else {\n        slots['container-end'].push(child);\n      }\n    } else {\n      slots['container-end'].push(child);\n    }\n  });\n  return {\n    slides: slides,\n    slots: slots\n  };\n}\n\nexport { getChildren };","map":{"version":3,"sources":["D:/GithubProjects/Woodsy-Shop/frontend/node_modules/swiper/react/get-children.js"],"names":["React","processChildren","c","slides","Children","toArray","forEach","child","type","displayName","push","props","children","slide","getChildren","slots","slot","foundSlides","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,eAAT,CAAyBC,CAAzB,EAA4B;AAC1B,MAAMC,MAAM,GAAG,EAAf;AACAH,EAAAA,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBH,CAAvB,EAA0BI,OAA1B,CAAkC,UAAAC,KAAK,EAAI;AACzC,QAAIA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWC,WAAX,KAA2B,aAA7C,EAA4D;AAC1DN,MAAAA,MAAM,CAACO,IAAP,CAAYH,KAAZ;AACD,KAFD,MAEO,IAAIA,KAAK,CAACI,KAAN,IAAeJ,KAAK,CAACI,KAAN,CAAYC,QAA/B,EAAyC;AAC9CX,MAAAA,eAAe,CAACM,KAAK,CAACI,KAAN,CAAYC,QAAb,CAAf,CAAsCN,OAAtC,CAA8C,UAAAO,KAAK;AAAA,eAAIV,MAAM,CAACO,IAAP,CAAYG,KAAZ,CAAJ;AAAA,OAAnD;AACD;AACF,GAND;AAOA,SAAOV,MAAP;AACD;;AAED,SAASW,WAAT,CAAqBZ,CAArB,EAAwB;AACtB,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMY,KAAK,GAAG;AACZ,uBAAmB,EADP;AAEZ,qBAAiB,EAFL;AAGZ,qBAAiB,EAHL;AAIZ,mBAAe;AAJH,GAAd;AAMAf,EAAAA,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBH,CAAvB,EAA0BI,OAA1B,CAAkC,UAAAC,KAAK,EAAI;AACzC,QAAIA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWC,WAAX,KAA2B,aAA7C,EAA4D;AAC1DN,MAAAA,MAAM,CAACO,IAAP,CAAYH,KAAZ;AACD,KAFD,MAEO,IAAIA,KAAK,CAACI,KAAN,IAAeJ,KAAK,CAACI,KAAN,CAAYK,IAA3B,IAAmCD,KAAK,CAACR,KAAK,CAACI,KAAN,CAAYK,IAAb,CAA5C,EAAgE;AACrED,MAAAA,KAAK,CAACR,KAAK,CAACI,KAAN,CAAYK,IAAb,CAAL,CAAwBN,IAAxB,CAA6BH,KAA7B;AACD,KAFM,MAEA,IAAIA,KAAK,CAACI,KAAN,IAAeJ,KAAK,CAACI,KAAN,CAAYC,QAA/B,EAAyC;AAC9C,UAAMK,WAAW,GAAGhB,eAAe,CAACM,KAAK,CAACI,KAAN,CAAYC,QAAb,CAAnC;;AAEA,UAAIK,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BD,QAAAA,WAAW,CAACX,OAAZ,CAAoB,UAAAO,KAAK;AAAA,iBAAIV,MAAM,CAACO,IAAP,CAAYG,KAAZ,CAAJ;AAAA,SAAzB;AACD,OAFD,MAEO;AACLE,QAAAA,KAAK,CAAC,eAAD,CAAL,CAAuBL,IAAvB,CAA4BH,KAA5B;AACD;AACF,KARM,MAQA;AACLQ,MAAAA,KAAK,CAAC,eAAD,CAAL,CAAuBL,IAAvB,CAA4BH,KAA5B;AACD;AACF,GAhBD;AAiBA,SAAO;AACLJ,IAAAA,MAAM,EAANA,MADK;AAELY,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;;AAED,SAASD,WAAT","sourcesContent":["import React from 'react';\r\n\r\nfunction processChildren(c) {\r\n  const slides = [];\r\n  React.Children.toArray(c).forEach(child => {\r\n    if (child.type && child.type.displayName === 'SwiperSlide') {\r\n      slides.push(child);\r\n    } else if (child.props && child.props.children) {\r\n      processChildren(child.props.children).forEach(slide => slides.push(slide));\r\n    }\r\n  });\r\n  return slides;\r\n}\r\n\r\nfunction getChildren(c) {\r\n  const slides = [];\r\n  const slots = {\r\n    'container-start': [],\r\n    'container-end': [],\r\n    'wrapper-start': [],\r\n    'wrapper-end': []\r\n  };\r\n  React.Children.toArray(c).forEach(child => {\r\n    if (child.type && child.type.displayName === 'SwiperSlide') {\r\n      slides.push(child);\r\n    } else if (child.props && child.props.slot && slots[child.props.slot]) {\r\n      slots[child.props.slot].push(child);\r\n    } else if (child.props && child.props.children) {\r\n      const foundSlides = processChildren(child.props.children);\r\n\r\n      if (foundSlides.length > 0) {\r\n        foundSlides.forEach(slide => slides.push(slide));\r\n      } else {\r\n        slots['container-end'].push(child);\r\n      }\r\n    } else {\r\n      slots['container-end'].push(child);\r\n    }\r\n  });\r\n  return {\r\n    slides,\r\n    slots\r\n  };\r\n}\r\n\r\nexport { getChildren };"]},"metadata":{},"sourceType":"module"}