{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\woodsy\\\\src\\\\context\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  products: [],\n  totalAmount: 0\n};\n\nconst saveCartOnLocal = cartState => {\n  localStorage.setItem(\"cartState\", cartState);\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const currProduct = action.payload;\n    const updatedTotalAmount = state.totalAmount + currProduct.price * currProduct.amount;\n    const existingCartProductIndex = state.products.findIndex(product => product._id === currProduct._id);\n    const existingCartProduct = state.products[existingCartProductIndex];\n    let updatedProducts;\n\n    if (existingCartProduct) {\n      const updatedProduct = { ...existingCartProduct,\n        amount: existingCartProduct.amount + currProduct.amount\n      };\n      updatedProducts = [...state.products];\n      updatedProducts[existingCartProductIndex] = updatedProduct;\n    } else {\n      updatedProducts = state.products.concat(currProduct);\n    }\n\n    const cartState = {\n      products: updatedProducts,\n      totalAmount: updatedTotalAmount.toFixed(2)\n    };\n    saveCartOnLocal(cartState);\n    return cartState;\n  }\n\n  if (action.type === \"REMOVE\") {\n    const currProductId = action.payload;\n    const existingCartProductIndex = state.products.findIndex(product => product._id === currProductId);\n    const existingCartProduct = state.products[existingCartProductIndex];\n    const updatedTotalAmount = state.totalAmount - existingCartProduct.price;\n    let updatedProducts;\n\n    if (existingCartProduct.amount === 1) {\n      updatedProducts = state.products.filter(product => product._id !== currProductId);\n    } else {\n      const updatedProduct = { ...existingCartProduct,\n        amount: existingCartProduct.amount - 1\n      };\n      updatedProducts = [...state.products];\n      updatedProducts[existingCartProductIndex] = updatedProduct;\n    }\n\n    const cartState = {\n      products: updatedProducts,\n      totalAmount: updatedTotalAmount.toFixed(2)\n    };\n    saveCartOnLocal(cartState);\n    return cartState;\n  }\n\n  if (action.type === \"REMOVE_ITEM\") {\n    const currProductId = action.payload;\n    const updatedProducts = state.products.filter(product => product._id !== currProductId);\n    const existingCartProductIndex = state.products.findIndex(product => product._id === currProductId);\n    const existingCartProduct = state.products[existingCartProductIndex];\n    const updatedTotalAmount = state.totalAmount - existingCartProduct.price * existingCartProduct.amount;\n    const cartState = {\n      products: updatedProducts,\n      totalAmount: updatedTotalAmount.toFixed(2)\n    };\n    saveCartOnLocal(cartState);\n    return cartState;\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addProductToCartHandler = product => {\n    dispatchCartAction({\n      type: \"ADD\",\n      payload: product\n    });\n  };\n\n  const removeProductFromCartHandler = productId => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      payload: productId\n    });\n  };\n\n  const clearProductFromCart = productId => {\n    dispatchCartAction({\n      type: \"REMOVE_ITEM\",\n      payload: productId\n    });\n  };\n\n  const cartContext = {\n    products: cartState.products,\n    totalAmount: cartState.totalAmount,\n    addProduct: addProductToCartHandler,\n    removeProduct: removeProductFromCartHandler,\n    clearProduct: clearProductFromCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/Web Development/woodsy/src/context/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","products","totalAmount","saveCartOnLocal","cartState","localStorage","setItem","cartReducer","state","action","type","currProduct","payload","updatedTotalAmount","price","amount","existingCartProductIndex","findIndex","product","_id","existingCartProduct","updatedProducts","updatedProduct","concat","toFixed","currProductId","filter","CartProvider","props","dispatchCartAction","addProductToCartHandler","removeProductFromCartHandler","productId","clearProductFromCart","cartContext","addProduct","removeProduct","clearProduct","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  products: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst saveCartOnLocal = (cartState) => {\r\n  localStorage.setItem(\"cartState\", cartState)\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    const currProduct = action.payload;\r\n    const updatedTotalAmount =\r\n      state.totalAmount + currProduct.price * currProduct.amount;\r\n\r\n    const existingCartProductIndex = state.products.findIndex(\r\n      (product) => product._id === currProduct._id\r\n    );\r\n    const existingCartProduct = state.products[existingCartProductIndex];\r\n\r\n    let updatedProducts;\r\n    if (existingCartProduct) {\r\n      const updatedProduct = {\r\n        ...existingCartProduct,\r\n        amount: existingCartProduct.amount + currProduct.amount,\r\n      };\r\n      updatedProducts = [...state.products];\r\n      updatedProducts[existingCartProductIndex] = updatedProduct;\r\n    } else {\r\n      updatedProducts = state.products.concat(currProduct);\r\n    }\r\n \r\n    const cartState = {\r\n      products: updatedProducts,\r\n      totalAmount: updatedTotalAmount.toFixed(2),\r\n    };\r\n\r\n    saveCartOnLocal(cartState);\r\n    return cartState;\r\n  }\r\n\r\n  if (action.type === \"REMOVE\") {\r\n    const currProductId = action.payload;\r\n    const existingCartProductIndex = state.products.findIndex(\r\n      (product) => product._id === currProductId\r\n    );\r\n    const existingCartProduct = state.products[existingCartProductIndex];\r\n    const updatedTotalAmount = state.totalAmount - existingCartProduct.price;\r\n\r\n    let updatedProducts;\r\n    if (existingCartProduct.amount === 1) {\r\n      updatedProducts = state.products.filter(\r\n        (product) => product._id !== currProductId\r\n      );\r\n    } else {\r\n      const updatedProduct = {\r\n        ...existingCartProduct,\r\n        amount: existingCartProduct.amount - 1,\r\n      };\r\n      updatedProducts = [...state.products];\r\n      updatedProducts[existingCartProductIndex] = updatedProduct;\r\n    }\r\n \r\n    const cartState = {\r\n      products: updatedProducts,\r\n      totalAmount: updatedTotalAmount.toFixed(2),\r\n    };\r\n\r\n    saveCartOnLocal(cartState);\r\n    return cartState;\r\n  }\r\n\r\n  if (action.type === \"REMOVE_ITEM\") {\r\n    const currProductId = action.payload;\r\n    const updatedProducts = state.products.filter(\r\n      (product) => product._id !== currProductId\r\n    );\r\n    const existingCartProductIndex = state.products.findIndex(\r\n      (product) => product._id === currProductId\r\n    );\r\n    const existingCartProduct = state.products[existingCartProductIndex];\r\n    const updatedTotalAmount = state.totalAmount - existingCartProduct.price * existingCartProduct.amount;\r\n \r\n    const cartState = {\r\n      products: updatedProducts,\r\n      totalAmount: updatedTotalAmount.toFixed(2),\r\n    };\r\n\r\n    saveCartOnLocal(cartState);\r\n    return cartState;\r\n  }\r\n\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addProductToCartHandler = (product) => {\r\n    dispatchCartAction({\r\n      type: \"ADD\",\r\n      payload: product,\r\n    });\r\n  };\r\n\r\n  const removeProductFromCartHandler = (productId) => {\r\n    dispatchCartAction({\r\n      type: \"REMOVE\",\r\n      payload: productId,\r\n    });\r\n  };\r\n\r\n  const clearProductFromCart = (productId) => {\r\n    dispatchCartAction({\r\n      type: \"REMOVE_ITEM\",\r\n      payload: productId,\r\n    })\r\n  };\r\n\r\n  const cartContext = {\r\n    products: cartState.products,\r\n    totalAmount: cartState.totalAmount,\r\n    addProduct: addProductToCartHandler,\r\n    removeProduct: removeProductFromCartHandler,\r\n    clearProduct: clearProductFromCart\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}